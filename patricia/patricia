- bit divergences are binary, thats why we only need to store the first 
  differing bit of the branch

- patricia is radix with r=2

- only terminal nodes hold val, a copy of the entire path to that node
  (key), the others store a nullptr. That is necessary bc we can see how
  path compression alone could allow for false positives like:

	100000 -> goes to branch 0
	100100 -> goes to branch 1

	without value 100001 would incorrectly evalueate true for 100000
	
- due to [path compression we can see that early returns are not possible

- due to path compression we can see suffic search becomes hard and expensive
  as it would require us to traverse every node or to store values on every
  node, thus defeating patricia's main objective



# ============= Morrisson's paper =============

Vocabulaty

- TEXT:
	finite sequence of bits, {0, 1}* also written as {A, B}*
	h(0) -> A, h(1) -> B

- ADDRESSES:
	a text is identified by an address occupied by A or B
	Addresses are consecutive positive integers that increase
	as the text is read freom left to right.

Certain addresses can be designated as START or STOP.
- START:
	at the beggining of each occurrence of a key
- STOP:
	a breakpoint separating left from right information

- END:
	an L-PHRASE that begins at a START and ends at the next STOP

- L-PHRASE:
	a PROPER OCCURRENCE, that is, an occurrence that begins at START
	and ends no later than the next STOP.

	Any phrase with, at least, one propper occurrence is callend an L-PHRASE

- L:
	the set of all L-PHRASES


Every left part of an end is an L-PHRASE and every right part of an L-PHRASE is an END


- BRANCH:
	given p, an L-PHRASE and pA & pB, the minimal right etensions of p.

	p is a BRANCH if pA and pB are in L

- TWIN:
	
- CHAIN:



No key may be a prefix of another -> we solve this by adding a unique end of text code
I will use: \0. That means no processing of words containing \0 will be allowed.



useful links:
	Morrisson's paper pdf download: 
		https://googlegroups.com/group/pongba/attach/a5c4dfef0c9e56b7/p514-morrison.pdf?part=0.1
	art of computer programming - vol3 (sorting & searching) page510+:
		https://seriouscomputerist.atariverse.com/media/pdf/book/Art%20of%20Computer%20Programming%20-%20Volume%203%20(Sorting%20&%20Searching).pdf
